// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace mtcg.Migrations
{
    [DbContext(typeof(mtcgDbContext))]
    partial class YourDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Battle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Player1Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Player2Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("BattleResult", b =>
                {
                    b.Property<Guid>("BattleResultId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDraw")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LoserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("BattleResultId");

                    b.HasIndex("LoserId");

                    b.HasIndex("WinnerId");

                    b.ToTable("BattleResults");
                });

            modelBuilder.Entity("Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Damage")
                        .HasColumnType("double precision");

                    b.Property<int?>("ElementType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserDeckId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserDeckId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BattleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Player1CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Player1UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Player2CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Player2UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.HasKey("RoundId");

                    b.HasIndex("BattleId");

                    b.HasIndex("Player1CardId");

                    b.HasIndex("Player1UserId");

                    b.HasIndex("Player2CardId");

                    b.HasIndex("Player2UserId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("TradingDeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardToTrade")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatorUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MinimumDamage")
                        .HasColumnType("double precision");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TradingDeals");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BattleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<double>("Coins")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ConfiguredDeckId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OpponentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("ConfiguredDeckId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserDeck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserDeck");
                });

            modelBuilder.Entity("UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("StatsUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StatsUserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("UserStats", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Elo")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("BattleResult", b =>
                {
                    b.HasOne("Battle", null)
                        .WithOne("Result")
                        .HasForeignKey("BattleResult", "BattleResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserStats", "Loser")
                        .WithMany()
                        .HasForeignKey("LoserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserStats", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loser");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Card", b =>
                {
                    b.HasOne("Package", null)
                        .WithMany("Cards")
                        .HasForeignKey("PackageId");

                    b.HasOne("UserDeck", "UserDeck")
                        .WithMany("Cards")
                        .HasForeignKey("UserDeckId");

                    b.Navigation("UserDeck");
                });

            modelBuilder.Entity("Round", b =>
                {
                    b.HasOne("Battle", null)
                        .WithMany("Rounds")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Card", "Player1Card")
                        .WithMany()
                        .HasForeignKey("Player1CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Card", "Player2Card")
                        .WithMany()
                        .HasForeignKey("Player2CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player1Card");

                    b.Navigation("Player2");

                    b.Navigation("Player2Card");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("UserDeck", "ConfiguredDeck")
                        .WithMany()
                        .HasForeignKey("ConfiguredDeckId");

                    b.Navigation("ConfiguredDeck");
                });

            modelBuilder.Entity("UserProfile", b =>
                {
                    b.HasOne("UserStats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsUserId");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("UserStats", b =>
                {
                    b.HasOne("User", "User")
                        .WithOne("UserStats")
                        .HasForeignKey("UserStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Battle", b =>
                {
                    b.Navigation("Result")
                        .IsRequired();

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Package", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("UserStats");
                });

            modelBuilder.Entity("UserDeck", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
